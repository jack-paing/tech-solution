// Code generated by mockery v2.9.4. DO NOT EDIT.

package mocks

import (
	context "context"
	model "tech-solution/model"

	mock "github.com/stretchr/testify/mock"
)

// CardRepo is an autogenerated mock type for the CardRepo type
type CardRepo struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, card
func (_m *CardRepo) Create(ctx context.Context, card *model.Card) error {
	ret := _m.Called(ctx, card)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Card) error); ok {
		r0 = rf(ctx, card)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, cardId
func (_m *CardRepo) Delete(ctx context.Context, cardId string) error {
	ret := _m.Called(ctx, cardId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, cardId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx
func (_m *CardRepo) Get(ctx context.Context) ([]*model.Card, error) {
	ret := _m.Called(ctx)

	var r0 []*model.Card
	if rf, ok := ret.Get(0).(func(context.Context) []*model.Card); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Card)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByCardId provides a mock function with given fields: ctx, cardId
func (_m *CardRepo) GetByCardId(ctx context.Context, cardId string) (*model.Card, error) {
	ret := _m.Called(ctx, cardId)

	var r0 *model.Card
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Card); ok {
		r0 = rf(ctx, cardId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Card)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, cardId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, cardId, updateCard
func (_m *CardRepo) Update(ctx context.Context, cardId string, updateCard *model.Card) error {
	ret := _m.Called(ctx, cardId, updateCard)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *model.Card) error); ok {
		r0 = rf(ctx, cardId, updateCard)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
